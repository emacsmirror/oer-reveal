# -*- eval: (visual-line-mode) -*-

# Neither generate table of contents nor section numbers
#+OPTIONS: toc:nil num:nil

# Enable: browser history, mouse wheel, links between presentations
#+OPTIONS: reveal_history:t reveal_mousewheel:t reveal_inter_presentation_links:t

# Transition styles: none/fade/slide/convex/concave/zoom/cube
#+REVEAL_TRANS: fade
#+REVEAL_THEME: jl-simple

#+REVEAL_PLUGINS: (notes search zoom)

# The following variables are non-standard.
# Do not display TOC-progress on title slide.
#+REVEAL_TITLE_SLIDE_STATE: no-toc-progress
# Do not display TOC-progress on TOC slide.
#+REVEAL_TOC_SLIDE_STATE: no-toc-progress
# Do not include TOC slide in TOC-progress.
#+REVEAL_TOC_SLIDE_CLASS: no-toc-progress
# Use different heading for TOC.
#+REVEAL_TOC_SLIDE_TITLE: Agenda

#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/toc-progress/toc-progress.css
#+REVEAL_EXTRA_CSS: ./reveal.js/css/theme/toc-style.css

# The following creates an empty footer, for which the css style defines
# a height that agrees with the TOC-progress footer’s height.
# In this way, the footer’s height is taken into account by reveal.js’s
# size calculations.
#+REVEAL_SLIDE_FOOTER: <br>
#+OPTIONS: reveal_toc_footer:t

# Set a default bib file.
#+MACRO: bibliographyfile bibliography:references.bib

# To display images with license information, some macros are
# available.
# See emacs-reveal-howto for sample use:
# https://gitlab.com/oer/emacs-reveal-howto
#
# First, revealimg() expects up to three arguments, a filename for a
# file with meta-data about an image, a caption (optional), and
# (optionally) the maximum height of image in HTML, e.g., 50vh.  This
# is meant to be used with horizontally centered images, caption
# underneath, license text rotated to the right.
# Second, reveallicense() expects up to two arguments, the filename
# for meta-data and optionally the maximum height.  Here, the image is
# displayed inline in the surrouding paragraph or list, aligned to the
# right.  Again, license information is rotated to the right of the
# image.
# The macros use function reveal-export-attribution, defined in
# reveal-config.el.
#
#+MACRO: revealimg (eval (reveal-export-attribution $1 $2 $3))
#+MACRO: reveallicense (eval (reveal-export-attribution $1 nil $2))

# Finally, revealgrid creates an image grid.  Its six arguments are as
# follows:
# - a unique grid number (e.g., starting from one),
# - a file listing the images to position on the grid,
# - the height of the grid as percentage of the height of the viewport
#   (used with CSS unit vh),
# - the numbers of (a) columns and (b) rows of the grid,
# - and grid-template-areas to specify what image to position on what
#   grid cell(s); see, e.g.:
#   https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
#   With this macro, the grid areas *must* be named ga1, ga2, ...
# This macro uses reveal-export-image-grid in reveal-config.el.
#+MACRO: revealgrid (eval (reveal-export-image-grid $1 $2 $3 $4 $5 $6))
