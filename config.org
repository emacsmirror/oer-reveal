# -*- eval: (visual-line-mode) -*-

# Neither generate table of contents nor section numbers
#+OPTIONS: toc:nil num:nil

# Enable: browser history, mouse wheel, links between presentations
#+OPTIONS: reveal_history:t reveal_mousewheel:t reveal_inter_presentation_links:t

# Enable smart quotes
#+OPTIONS: ':t

# Transition styles: none/fade/slide/convex/concave/zoom/cube
#+REVEAL_TRANS: fade
#+REVEAL_THEME: jl-simple

#+REVEAL_PLUGINS: (notes search zoom)

# The following variables are non-standard.
# Do not display TOC-progress on title slide.
#+REVEAL_TITLE_SLIDE_STATE: no-toc-progress
# Do not display TOC-progress on TOC slide.
#+REVEAL_TOC_SLIDE_STATE: no-toc-progress
# Do not include TOC slide in TOC-progress.
#+REVEAL_TOC_SLIDE_CLASS: no-toc-progress
# Use different heading for TOC.
#+REVEAL_TOC_SLIDE_TITLE: Agenda

#+REVEAL_EXTRA_CSS: ./reveal.js/plugin/toc-progress/toc-progress.css
#+REVEAL_EXTRA_CSS: ./reveal.js/css/theme/toc-style.css

# The following creates an empty footer, for which the css style defines
# a height that agrees with the TOC-progress footer’s height.
# In this way, the footer’s height is taken into account by reveal.js’s
# size calculations.
#+REVEAL_SLIDE_FOOTER: <br>
#+OPTIONS: reveal_toc_footer:t

# Set a default bib file.
#+MACRO: bibliographyfile bibliography:references.bib

# Setup for PDF generation via LaTeX export.
#+LATEX_CLASS_OPTIONS: [a4paper]
#+LATEX_HEADER: \usepackage[backend=biber,style=alphabetic]{biblatex}
#+LATEX_HEADER: \addbibresource{references.bib}
#+LATEX_HEADER: \newenvironment{NOTES}{\par\footnotesize}{\par}
#+LATEX_HEADER: \newenvironment{leftcol}{}{}
#+LATEX_HEADER: \newenvironment{rightcol}{}{}
#+LATEX_HEADER: \newenvironment{leftcol30}{}{}
#+LATEX_HEADER: \newenvironment{leftcol40}{}{}
#+LATEX_HEADER: \newenvironment{leftcol60}{}{}
#+LATEX_HEADER: \newenvironment{leftcol70}{}{}
#+LATEX_HEADER: \newenvironment{rightcol30}{}{}
#+LATEX_HEADER: \newenvironment{rightcol40}{}{}
#+LATEX_HEADER: \newenvironment{rightcol60}{}{}
#+LATEX_HEADER: \newenvironment{rightcol70}{}{}
#+LATEX_HEADER: \usepackage{newunicodechar}
#+LATEX_HEADER: \newunicodechar{≈}{$\approx$}
#+LATEX_HEADER: \newunicodechar{⋮}{\vdots}
#+LATEX_HEADER: \newunicodechar{ }{~}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \definecolor{darkred}{rgb}{0.3, 0.0, 0.0}
#+LATEX_HEADER: \definecolor{darkgreen}{rgb}{0.0, 0.3, 0.1}
#+LATEX_HEADER: \definecolor{darkblue}{rgb}{0.0, 0.1, 0.3}
#+LATEX_HEADER: \definecolor{darkorange}{rgb}{1.0, 0.55, 0.0}
#+LATEX_HEADER: \definecolor{sienna}{rgb}{0.53, 0.18, 0.09}
#+LATEX_HEADER: \hypersetup{colorlinks,linkcolor=darkblue,citecolor=darkblue,urlcolor=darkgreen}
#+LATEX_HEADER: \usepackage{newverbs}
#+LATEX_HEADER: \newverbcommand{\rverb}{\color{darkred}}{}
#+LATEX_HEADER: \newverbcommand{\gverb}{\color{darkgreen}}{}
#+LATEX_HEADER: \newverbcommand{\bverb}{\color{darkblue}}{}

# Macros to display code in different colors.
#+MACRO: blackcode @@html:<code><span style="color:black; font-size:smaller;">$1</span></code>@@ @@latex:\texttt{$1}@@
#+MACRO: redcode @@html:<code><span style="color:darkred; font-size:smaller;">$1</span></code>@@ @@latex:\rverb|$1|@@
#+MACRO: greencode @@html:<code><span style="color:darkgreen; font-size:smaller;">$1</span></code>@@ @@latex:\gverb|$1|@@
#+MACRO: bluecode @@html:<code><span style="color:darkblue; font-size:smaller;">$1</span></code>@@ @@latex:\bverb|$1|@@

# To display images with license information, some macros are
# available.
# See emacs-reveal-howto for sample use:
# https://gitlab.com/oer/emacs-reveal-howto
#
# First, revealimg() expects up to five arguments, a filename for a
# file with meta-data about an image and up to four optional
# arguments: a caption, the maximum height of image in HTML, e.g.,
# 50vh, a list of CSS classes (space separated, containing "figure"),
# and a Boolean attribute specifying whether a short license should
# be used.
# This is meant to be used with horizontally centered images, caption
# underneath, license text rotated to the right.
# Second, reveallicense() expects up to four arguments, the filename
# for meta-data and optionally the maximum height, CSS classes, and
# indicator for short license.  Here, the image is displayed inline in
# the surrouding paragraph or list, aligned to the right.  Again,
# license information is rotated to the right of the image.
# The macros use function reveal-export-attribution, defined in
# reveal-config.el.
#
#+MACRO: revealimg (eval (reveal-export-attribution $1 $2 $3 $4 $5))
#+MACRO: reveallicense (eval (reveal-export-attribution $1 nil $2 $3 $4))

# Finally, revealgrid creates an image grid.  Its six arguments are as
# follows:
# - a unique grid number (e.g., starting from one),
# - a file listing the images to position on the grid,
# - the height of the grid as percentage of the height of the viewport
#   (used with CSS unit vh),
# - the numbers of (a) columns and (b) rows of the grid,
# - and grid-template-areas to specify what image to position on what
#   grid cell(s); see, e.g.:
#   https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-areas
#   With this macro, the grid areas *must* be named ga1, ga2, ...
# This macro uses reveal-export-image-grid in reveal-config.el.
#+MACRO: revealgrid (eval (reveal-export-image-grid $1 $2 $3 $4 $5 $6))
